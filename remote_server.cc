#include "remote_message.grpc.pb.h"

#include "absl/flags/flag.h"
#include "absl/flags/parse.h"
#include "absl/strings/str_format.h"

#include <grpcpp/ext/proto_server_reflection_plugin.h>
#include <grpcpp/grpcpp.h>
#include <grpcpp/health_check_service_interface.h>
#include <opencv4/opencv2/opencv.hpp>

#include "media_handler.h"
#include "yolov4.h"

#include <iostream>
#include <string>
#include <random>
#include <fstream>

using grpc::Server;
using grpc::ServerBuilder;
using grpc::ServerContext;
using grpc::Status;

using remote::RemoteCommunication;
using remote::ProtoMat;

using namespace std;

ABSL_FLAG(uint16_t, port, 50051, "Server port for the service");

class ServerNode final 
: public RemoteCommunication::Service, public MediaHandler, public YOLOv4
{
public:
    ServerNode()
        : _yolo(new YOLOv4()) {}
    Status RemoteProcessImageWithCircle(ServerContext* context, const ProtoMat* request, ProtoMat* reply) override
    {
        cv::Mat frame = ConvertProtomatToMat(*request);

        random_device rd;
        mt19937 gen(rd());
        uniform_int_distribution<int> dis(0, 255);

        cv::circle(frame, cv::Point(frame.cols/2, frame.rows/2), 50, cv::Scalar(dis(gen), dis(gen), dis(gen)), 3); 
        *reply = ConvertMatToProtomat(frame);

        return Status::OK;
    }

    Status RemoteProcessImageWithYOLO(ServerContext* context, const ProtoMat* request, ProtoMat* reply) override
    {
        cv::Mat frame = ConvertProtomatToMat(*request);
        *reply = ConvertMatToProtomat(_yolo->DetectObject(frame));

        return Status::OK;
    }

private:
    YOLOv4* _yolo;
};

//////////////////////////////////////////////////////////////////////
//                               REMARK                             //
//////////////////////////////////////////////////////////////////////
//   void Runserver(uint16_t port) is                               //
//   reference code from grpc/example/cpp.                          //
//   but *builder.SetMax...Size* codes are                          //
//   generated by juno                                              //
//////////////////////////////////////////////////////////////////////
void RunServer(uint16_t port) 
{
    ServerNode service;
    ServerBuilder builder;
    string serverAddress = absl::StrFormat("0.0.0.0:%d", port);

    grpc::EnableDefaultHealthCheckService(true);
    grpc::reflection::InitProtoReflectionServerBuilderPlugin();

    builder.SetMaxSendMessageSize(1024 * 1024 * 1024 /* == 1GiB */);
    builder.SetMaxReceiveMessageSize(1024 * 1024 * 1024 /* == 1GiB */);
    builder.AddListeningPort(serverAddress, grpc::InsecureServerCredentials());
    builder.RegisterService(&service);
    
    unique_ptr<Server> server(builder.BuildAndStart());

    cout << "\nServer listening on " << serverAddress << endl;

    server->Wait();
}

int main(int argc, char** argv) 
{
    absl::ParseCommandLine(argc, argv);
    RunServer(absl::GetFlag(FLAGS_port));
    
    return 0;
}
